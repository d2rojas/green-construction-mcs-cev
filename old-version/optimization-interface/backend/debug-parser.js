const OpenAI = require('openai');
const { OPENAI_CONFIG } = require('./config/openai');

// Initialize OpenAI
const openai = new OpenAI({
  apiKey: OPENAI_CONFIG.apiKey,
});

async function debugParser() {
  console.log('üîç Debugging LLM Parser...');
  
  const testInput = 'I need to configure a scenario with 1 MCS, 2 CEVs, and 3 nodes';
  
  try {
    console.log('üìù Test input:', testInput);
    
    // Test scenario parsing
    console.log('\nüß™ Testing scenario parsing...');
    
    const scenarioPrompt = `You are an expert parser for MCS-CEV optimization scenarios. Your task is to extract scenario configuration parameters from natural language input.

USER INPUT: "${testInput}"

EXTRACT the following parameters and return ONLY a JSON object with this exact structure:

{
  "numMCS": <number between 1-10>,
  "numCEV": <number between 1-20>,
  "numNodes": <number between 2-20>,
  "is24Hours": <boolean>,
  "scenarioName": "<auto-generated name>",
  "confidence": <number 0-1>,
  "missingInfo": ["list of missing information"],
  "suggestions": ["list of suggestions"]
}

Return ONLY the JSON object, no other text.`;

    const scenarioResponse = await openai.chat.completions.create({
      model: OPENAI_CONFIG.model,
      messages: [
        {
          role: 'system',
          content: scenarioPrompt
        },
        {
          role: 'user',
          content: testInput
        }
      ],
      max_tokens: 500,
      temperature: 0.1,
      response_format: { type: "json_object" }
    });

    console.log('‚úÖ Scenario parsing successful!');
    const scenarioData = JSON.parse(scenarioResponse.choices[0].message.content);
    console.log('üìù Scenario data:', JSON.stringify(scenarioData, null, 2));
    
    // Test parameters parsing
    console.log('\nüß™ Testing parameters parsing...');
    
    const parametersPrompt = `You are an expert parser for MCS-CEV optimization model parameters. Extract technical parameters from natural language input.

USER INPUT: "${testInput}"

EXTRACT the following parameters and return ONLY a JSON object with this exact structure:

{
  "eta_ch_dch": <number 0-1>,
  "MCS_max": <number in kWh>,
  "MCS_min": <number in kWh>,
  "MCS_ini": <number in kWh>,
  "CH_MCS": <number in kW>,
  "DCH_MCS": <number in kW>,
  "DCH_MCS_plug": <number in kW>,
  "C_MCS_plug": <integer>,
  "k_trv": <number in kWh/mile>,
  "delta_T": <number in hours>,
  "rho_miss": <number>,
  "confidence": <number 0-1>,
  "missingInfo": ["list of missing information"],
  "suggestions": ["list of suggestions"]
}

Use default values if not specified:
- eta_ch_dch: 0.95
- MCS_max: 1000.0
- MCS_min: 100.0
- MCS_ini: 500.0
- CH_MCS: 50.0
- DCH_MCS: 50.0
- DCH_MCS_plug: 50.0
- C_MCS_plug: 4
- k_trv: 1.0
- delta_T: 0.5
- rho_miss: 0.6

Return ONLY the JSON object, no other text.`;

    const parametersResponse = await openai.chat.completions.create({
      model: OPENAI_CONFIG.model,
      messages: [
        {
          role: 'system',
          content: parametersPrompt
        },
        {
          role: 'user',
          content: testInput
        }
      ],
      max_tokens: 800,
      temperature: 0.1,
      response_format: { type: "json_object" }
    });

    console.log('‚úÖ Parameters parsing successful!');
    const parametersData = JSON.parse(parametersResponse.choices[0].message.content);
    console.log('üìù Parameters data:', JSON.stringify(parametersData, null, 2));
    
    return true;
    
  } catch (error) {
    console.error('‚ùå Parser debug failed!');
    console.error('Error details:', error.message);
    console.error('Error stack:', error.stack);
    return false;
  }
}

// Run debug if this file is executed directly
if (require.main === module) {
  debugParser().catch(console.error);
}

module.exports = { debugParser };
